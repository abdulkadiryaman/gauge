package main;

message ExecutionStatus {
	required bool passed = 1;
	optional bool recoverableError = 2;
	optional string errorMessage = 3;
	optional string stackTrace = 4;
	optional bytes screenShot = 5;
}

message KillProcessRequest {
}

// Sends to any request which needs a execution status as response
// usually step execution, hooks etc will return this
message ExecutionStatusResponse {
	required ExecutionStatus executionStatus = 1;
}

message ExecutionStartingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message SpecExecutionStartingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message SpecExecutionEndingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message ScenarioExecutionStartingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message ScenarioExecutionEndingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message StepExecutionStartingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message StepExecutionEndingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message ExecutionInfo {
    optional SpecInfo currentSpec = 1;
    optional ScenarioInfo currentScenario = 2;
    optional StepInfo currentStep = 3;
    optional string stacktrace = 4;
}

message SpecInfo {
    required string name = 1;
    required string fileName = 2;
    required bool isFailed = 3;
    repeated string  tags = 4;
}

message ScenarioInfo {
    required string name = 1;
    required bool isFailed = 2;
    repeated string  tags = 3;
}

message StepInfo {
    required ExecuteStepRequest step = 1;
    required bool isFailed = 2;
}

message ExecuteStepRequest {
	required string actualStepText = 1;
    required string parsedStepText = 2;
	optional bool scenarioFailing = 3;
	repeated Argument args = 4;
}

message ProtoTable {
    repeated TableRow rows = 1;
}

message TableRow {
    repeated string cells = 1;
}

message Argument {
    required string type = 1;
    optional string value = 2;
    optional ProtoTable table  = 3;
}

message StepValidateRequest {
	required string stepText = 1;
    required int32 numberOfArguments = 2;
}

message StepValidateResponse {
	required bool isValid = 1;
    optional string errorMessage = 2;
}

message ExecutionEndingRequest {
    optional ExecutionInfo currentExecutionInfo = 1;
}

message StepNamesRequest {
}

message StepNamesResponse {
    repeated string steps = 1;
}

// This is the message which gets transferred all the time 
// with proper message type set
message Message {
	enum MessageType {
	    ExecutionStarting = 0;
	    SpecExecutionStarting = 1;
	    SpecExecutionEnding = 2;
	    ScenarioExecutionStarting = 3;
	    ScenarioExecutionEnding = 4;
	    StepExecutionStarting = 5;
	    StepExecutionEnding = 6;
	    ExecuteStep = 7;	    
	    ExecutionEnding = 8;
	    StepValidateRequest = 9;
	    StepValidateResponse = 10;
	    ExecutionStatusResponse = 11;
        StepNamesRequest = 12;
        StepNamesResponse = 13;
        KillProcessRequest = 14;
	}
  	
  	required MessageType messageType = 1;
  	
	// A unique id to represent this message. A response to the message should copy over this value
	// this is used to synchronize messages & responses
  	required int64 messageId = 2;

  	// One of the following will have a value
  	optional ExecutionStartingRequest executionStartingRequest = 3;
  	optional SpecExecutionStartingRequest specExecutionStartingRequest = 4;
  	optional SpecExecutionEndingRequest specExecutionEndingRequest = 5;
  	optional ScenarioExecutionStartingRequest scenarioExecutionStartingRequest = 6;
  	optional ScenarioExecutionEndingRequest scenarioExecutionEndingRequest = 7;
  	optional StepExecutionStartingRequest stepExecutionStartingRequest = 8;
  	optional StepExecutionEndingRequest stepExecutionEndingRequest = 9;
  	optional ExecuteStepRequest executeStepRequest = 10;  	
  	optional ExecutionEndingRequest executionEndingRequest = 11;
  	optional StepValidateRequest stepValidateRequest = 12;
  	optional StepValidateResponse stepValidateResponse = 13;
  	optional ExecutionStatusResponse executionStatusResponse = 14;
    optional StepNamesRequest stepNamesRequest = 15;
    optional StepNamesResponse stepNamesResponse = 16;
  	optional KillProcessRequest killProcessRequest = 17;
}

